# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action to perform: deploy or destroy'
        required: true
        default: deploy
        type: choice
        options:
          - deploy
          - destroy

  # Allows you to run this workflow manually from the Actions tab

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Runs a set of commands using the runners shell
      - name: Install dependencies
        run: npm install
        working-directory: ./Node

      - name: Build Docker image
        run: docker build -t harshit3355/peer:latest .
        working-directory: ./Node

      - name: Login to docker hub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      
      - name: Push Image to Docker Hub
        run: docker push harshit3355/peer:latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply or Destroy
        run: |
          if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
            terraform apply -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -auto-approve
          fi
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

        
      - name: Deploy to ECS
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
